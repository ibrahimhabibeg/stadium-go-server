scalar DateTime

type Query {
  getStadium(stadiumId: ID!): Stadium!
  getStadiums(filter: String, cursor: ID, take: Int): [Stadium!]!
  verifyUser: verifyUserResult!
  verifyOwner: verifyOwnerResult!
  cities: [City!]!
}
type Mutation {
  userLogin(email: String!, password: String!): UserAuthResult!
  ownerLogin(email: String!, password: String!): OwnerAuthResult!
  userSignup(signupData: SignupInput!): UserAuthResult!
  ownerSignup(signupData: SignupInput!): OwnerAuthResult!
  createStadium(stadiumData: createStadiumInput!): createStadiumResult!
  addTimeslot(timeslotData: addTimeslotInput!): addTimeslotResult!
}
type User {
  id: ID!
  username: String!
  email: String!
}
type Owner {
  id: ID!
  username: String!
  email: String!
  stadiums(cursor: ID, take: Int): [Stadium!]!
}
type UserAuthPayload {
  """
  JWT used for later user authentication.
  """
  token: String!
  user: User!
}
type OwnerAuthPayload {
  """
  JWT used for later owner authentication.
  """
  token: String!
  owner: Owner!
}
input SignupInput {
  email: String!
  username: String!
  password: String!
}
interface BaseError {
  message: String!
  arbMessage: String!
}
type AuthError implements BaseError {
  """
  English message indicating the error for the client.
  """
  message: String!
  """
  Arabic message indicating the error for the client.
  """
  arbMessage: String!
  """
  The field that the error is related to.
  Ex: PASSWORD when chosen password is too short
  """
  errorField: AuthField!
}
union UserAuthResult = UserAuthPayload | AuthError
union OwnerAuthResult = OwnerAuthPayload | AuthError
enum AuthField {
  USERNAME
  PASSWORD
  EMAIL
}

type Stadium {
  id: ID!
  owner: Owner!
  name: String!
  """
  The number of stadiums of the same properties the owner has.
  """
  count: Int!
  """
  Description for the stadium.
  """
  desc: String
  """
  The number of players per team including the goal keeper.
  """
  size: Int
  location: Location
  city: City
}

type Location {
  latitude: Float!
  longitude: Float!
}

type City {
  id: ID!
  name: String!
}

type Timeslot {
  id: ID!
  """
  Indicates the beginning of the allocated timeslot.
  """
  startTime: DateTime!
  """
  Indicates the end of the allocated timeslot.
  """
  endTime: DateTime!
  """
  Integer value representing the price for booking the stadium for this timeslot in EGP.
  """
  price: Int!
  stadium: Stadium!
  """
  The user who booked the stadium for this timeslot. Null if not booked.
  """
  bookedBy: User
}

input createStadiumInput {
  name: String!
  count: Int
  desc: String
  size: Int
  latitude: Float
  longitude: Float
  cityId: ID
}

input addTimeslotInput {
  stadiumId: ID!
  startTime: DateTime!
  endTime: DateTime!
  price: Int!
}

type OwnerAuthorizationError implements BaseError {
  message: String!
  arbMessage: String!
}

type UserAuthorizationError implements BaseError {
  message: String!
  arbMessage: String!
}

type InvalidTimeslotDataError implements BaseError {
  message: String!
  arbMessage: String!
}

union createStadiumResult = Stadium | OwnerAuthorizationError
union verifyUserResult = User | UserAuthorizationError
union verifyOwnerResult = Owner | OwnerAuthorizationError
union addTimeslotResult = Timeslot | OwnerAuthorizationError | InvalidTimeslotDataError
